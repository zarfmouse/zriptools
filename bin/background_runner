#!/usr/bin/php
<?php

declare(ticks = 1);
date_default_timezone_set('US/Central');
gc_disable();
define('LIBRARY_ROOT', '/home/zach/CDLibrary');

require_once __DIR__."/../lib/autoload-init.php";
require_once __DIR__."/../lib/doctrine-init.php";

use Doctrine\Common\Persistence\PersistentObject;

use ZCore\TaskManager;
use ZCore\ProgressMonitor;
use ZCore\BackgroundRunner;

use ZRipEntities\RipAudio as RipAudioEntity;
use ZRipEntities\EncodeFlac as EncodeFlacEntity;
use ZRipTasks\EncodeFlac;
use ZRipTasks\CddbRead;
use ZRipTasks\MusicbrainzRead;

$task_manager = new TaskManager;
$progress_monitor = new ProgressMonitor;
$task_manager->setProgressMonitor($progress_monitor);
$runner = new BackgroundRunner;
$runner->setTaskManager($task_manager);

$runner->registerTask(
		      function() {
			$em = PersistentObject::getObjectManager();
			$qb = $em->createQueryBuilder();
			$qb->select('r');
			$qb->from('ZRipEntities\RipAudio', 'r');
			$qb->leftJoin('r.encodeFlac', 'f');
			$qb->where('f.id IS NULL');
			$qb->andWhere('r.success = 1');
			$qb->setMaxResults(1);
			$query = $qb->getQuery();
			return $query->getSingleResult();
		      }, 
		      function(RipAudioEntity $data) {
			return new EncodeFlac($data);
		      });

$runner->registerTask(
		      function() {
			$em = PersistentObject::getObjectManager();
			$qb = $em->createQueryBuilder();
			$qb->select('r');
			$qb->from('ZRipEntities\RipAudio', 'r');
			$qb->join('r.meta', 'm');
			$qb->where('m.cddbPick IS NOT NULL');
			$qb->andWhere("NOT m.cddbPick LIKE 'No match for disc ID%'");
			$qb->andWhere("m.cddbPick != ''");
			$qb->andWhere("m.cddbData IS NULL");
			$qb->setMaxResults(1);
			$query = $qb->getQuery();
			return $query->getSingleResult();
		      }, 
		      function(RipAudioEntity $data) {
			sleep(1);
			return new CddbRead($data);
		      });

$runner->registerTask(
		      function() {
			$em = PersistentObject::getObjectManager();
			$qb = $em->createQueryBuilder();
			$qb->select('r');
			$qb->from('ZRipEntities\RipAudio', 'r');
			$qb->join('r.meta', 'm');
			$qb->where('m.musicbrainzRelease IS NOT NULL');
			$qb->andWhere("m.musicbrainzRelease != ''");
			$qb->andWhere("m.musicbrainzData IS NULL");
			$qb->setMaxResults(1);
			$query = $qb->getQuery();
			return $query->getSingleResult();
		      }, 
		      function(RipAudioEntity $data) {
			sleep(1);
			return new MusicbrainzRead($data);
		      });
$runner->run();









